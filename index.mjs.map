{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isEven from '@stdlib/math-base-assert-is-even';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport FLOAT64_MAX_NTH_DOUBLE_FACTORIAL from '@stdlib/constants-float64-max-nth-double-factorial'; // eslint-disable-line id-length\n\n\n// MAIN //\n\n/**\n* Evaluates the double factorial of `n`.\n*\n* @param {number} n - input value\n* @returns {(NonNegativeInteger|number)} double factorial\n*\n* @example\n* var v = factorial2( 3 );\n* // returns 3\n*\n* @example\n* var v = factorial2( 4 );\n* // returns 8\n*\n* @example\n* var v = factorial2( 5 );\n* // returns 15\n*\n* @example\n* var v = factorial2( 301 );\n* // returns Infinity\n*/\nfunction factorial2( n ) {\n\tvar last;\n\tvar out;\n\tvar v;\n\tvar i;\n\tif ( isnan( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( n > FLOAT64_MAX_NTH_DOUBLE_FACTORIAL ) {\n\t\treturn PINF;\n\t}\n\tif ( n < 0 || isInteger( n ) === false ) {\n\t\treturn NaN;\n\t}\n\tv = n|0; // asm type annotation\n\tif ( v === 0|0 || v === 1|0 ) {\n\t\treturn 1|0; // asm type annotation\n\t}\n\tif ( isEven( v ) ) {\n\t\tlast = 2|0; // asm type annotation\n\t} else {\n\t\tlast = 3|0; // asm type annotation\n\t}\n\tout = 1;\n\tfor ( i = v|0; i >= last; i -= 2|0 ) {\n\t\tout *= i|0; // asm type annotation\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default factorial2;\n"],"names":["factorial2","n","last","out","v","i","isnan","NaN","FLOAT64_MAX_NTH_DOUBLE_FACTORIAL","PINF","isInteger","isEven"],"mappings":";;0fAqDA,SAASA,EAAYC,GACpB,IAAIC,EACAC,EACAC,EACAC,EACJ,GAAKC,EAAOL,GACX,OAAOM,IAER,GAAKN,EAAIO,EACR,OAAOC,EAER,GAAKR,EAAI,IAAwB,IAAnBS,EAAWT,GACxB,OAAOM,IAGR,GAAW,KADXH,EAAM,EAAFH,GACS,GAAW,IAANG,EAAQ,EACzB,OAAO,EAQR,IALCF,EADIS,EAAQP,GACL,EAEA,EAERD,EAAM,EACAE,EAAM,EAAFD,EAAKC,GAAKH,EAAMG,GAAK,EAC9BF,GAAS,EAAFE,EAER,OAAOF,CACR"}