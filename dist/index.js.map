{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isInteger = require( '@stdlib/math-base-assert-is-integer' );\nvar isEven = require( '@stdlib/math-base-assert-is-even' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\n\n\n// VARIABLES //\n\nvar MAX_FACTORIAL2 = 301; // TODO: consider extracting as a constant\n\n\n// MAIN //\n\n/**\n* Evaluates the double factorial of `n`.\n*\n* @param {number} n - input value\n* @returns {(NonNegativeInteger|number)} double factorial\n*\n* @example\n* var v = factorial2( 3 );\n* // returns 3\n*\n* @example\n* var v = factorial2( 4 );\n* // returns 8\n*\n* @example\n* var v = factorial2( 5 );\n* // returns 15\n*\n* @example\n* var v = factorial2( 301 );\n* // returns Infinity\n*/\nfunction factorial2( n ) {\n\tvar last;\n\tvar out;\n\tvar v;\n\tvar i;\n\tif ( isnan( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( n > MAX_FACTORIAL2 ) {\n\t\treturn PINF;\n\t}\n\tif ( n < 0 || isInteger( n ) === false ) {\n\t\treturn NaN;\n\t}\n\tv = n|0; // asm type annotation\n\tif ( v === 0|0 || v === 1|0 ) {\n\t\treturn 1|0; // asm type annotation\n\t}\n\tif ( isEven( v ) ) {\n\t\tlast = 2|0; // asm type annotation\n\t} else {\n\t\tlast = 3|0; // asm type annotation\n\t}\n\tout = 1;\n\tfor ( i = v|0; i >= last; i -= 2|0 ) {\n\t\tout *= i|0; // asm type annotation\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = factorial2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the double factorial.\n*\n* @module @stdlib/math-base-special-factorial2\n*\n* @example\n* var factorial2 = require( '@stdlib/math-base-special-factorial2' );\n*\n* var v = factorial2( 3 );\n* // returns 3\n*\n* v = factorial2( 4 );\n* // returns 8\n*\n* v = factorial2( -10 );\n* // returns NaN\n*\n* v = factorial( NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAY,QAAS,qCAAsC,EAC3DC,EAAS,QAAS,kCAAmC,EACrDC,EAAO,QAAS,gCAAiC,EAKjDC,EAAiB,IA2BrB,SAASC,EAAYC,EAAI,CACxB,IAAIC,EACAC,EACAC,EACAC,EACJ,GAAKV,EAAOM,CAAE,EACb,MAAO,KAER,GAAKA,EAAIF,EACR,OAAOD,EAER,GAAKG,EAAI,GAAKL,EAAWK,CAAE,IAAM,GAChC,MAAO,KAGR,GADAG,EAAIH,EAAE,EACDG,IAAM,EAAE,GAAKA,IAAM,EAAE,EACzB,MAAO,GAQR,IANKP,EAAQO,CAAE,EACdF,EAAO,EAEPA,EAAO,EAERC,EAAM,EACAE,EAAID,EAAE,EAAGC,GAAKH,EAAMG,GAAK,EAC9BF,GAAOE,EAAE,EAEV,OAAOF,CACR,CAKAT,EAAO,QAAUM,IC/CjB,IAAIM,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isnan", "isInteger", "isEven", "PINF", "MAX_FACTORIAL2", "factorial2", "n", "last", "out", "v", "i", "main"]
}
