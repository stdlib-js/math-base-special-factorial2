{"version":3,"file":"browser.js","sources":["../node_modules/@stdlib/math-base-special-floor/lib/main.js","../node_modules/@stdlib/math-base-assert-is-even/lib/main.js","../node_modules/@stdlib/math-base-assert-is-integer/lib/main.js","../node_modules/@stdlib/constants-float64-pinf/lib/index.js","../lib/main.js","../node_modules/@stdlib/math-base-assert-is-nan/lib/main.js","../node_modules/@stdlib/math-base-assert-is-nonnegative-integer/lib/main.js","../node_modules/@stdlib/constants-float64-max-nth-double-factorial/lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation (?)\n\n/**\n* Rounds a double-precision floating-point number toward negative infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = floor( -4.2 );\n* // returns -5.0\n*\n* @example\n* var v = floor( 9.99999 );\n* // returns 9.0\n*\n* @example\n* var v = floor( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = floor( NaN );\n* // returns NaN\n*/\nvar floor = Math.floor; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default floor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a finite numeric value is an even number.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is an even number\n*\n* @example\n* var bool = isEven( 5.0 );\n* // returns false\n*\n* @example\n* var bool = isEven( -2.0 );\n* // returns true\n*\n* @example\n* var bool = isEven( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isEven( NaN );\n* // returns false\n*/\nfunction isEven( x ) {\n\treturn isInteger( x/2.0 );\n}\n\n\n// EXPORTS //\n\nexport default isEven;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Tests if a finite double-precision floating-point number is an integer.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is an integer\n*\n* @example\n* var bool = isInteger( 1.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( 3.14 );\n* // returns false\n*/\nfunction isInteger( x ) {\n\treturn (floor(x) === x);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* @module @stdlib/constants-float64-pinf\n* @type {number}\n*\n* @example\n* import FLOAT64_PINF from '@stdlib/constants-float64-pinf';\n* // returns Infinity\n*/\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.POSITIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default FLOAT64_PINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isNonnegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isEven from '@stdlib/math-base-assert-is-even';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport FLOAT64_MAX_NTH_DOUBLE_FACTORIAL from '@stdlib/constants-float64-max-nth-double-factorial'; // eslint-disable-line id-length\n\n\n// MAIN //\n\n/**\n* Evaluates the double factorial of `n`.\n*\n* @param {number} n - input value\n* @returns {(NonNegativeInteger|number)} double factorial\n*\n* @example\n* var v = factorial2( 3 );\n* // returns 3\n*\n* @example\n* var v = factorial2( 4 );\n* // returns 8\n*\n* @example\n* var v = factorial2( 5 );\n* // returns 15\n*\n* @example\n* var v = factorial2( 301 );\n* // returns Infinity\n*/\nfunction factorial2( n ) {\n\tvar last;\n\tvar out;\n\tvar v;\n\tvar i;\n\tif ( isnan( n ) || !isNonnegativeInteger( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( n > FLOAT64_MAX_NTH_DOUBLE_FACTORIAL ) {\n\t\treturn PINF;\n\t}\n\tv = n|0; // asm type annotation\n\tif ( v === 0|0 || v === 1|0 ) {\n\t\treturn 1|0; // asm type annotation\n\t}\n\tif ( isEven( v ) ) {\n\t\tlast = 2|0; // asm type annotation\n\t} else {\n\t\tlast = 3|0; // asm type annotation\n\t}\n\tout = 1;\n\tfor ( i = v|0; i >= last; i -= 2|0 ) {\n\t\tout *= i|0; // asm type annotation\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default factorial2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is `NaN`.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( 7.0 );\n* // returns false\n*/\nfunction isnan( x ) {\n\treturn ( x !== x );\n}\n\n\n// EXPORTS //\n\nexport default isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Tests if a finite double-precision floating-point number is a nonnegative integer.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is a nonnegative integer\n*\n* @example\n* var bool = isNonNegativeInteger( 1.0 );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeInteger( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeInteger( -10.0 );\n* // returns false\n*/\nfunction isNonNegativeInteger( x ) {\n\treturn (floor(x) === x && x >= 0);\n}\n\n\n// EXPORTS //\n\nexport default isNonNegativeInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum nth double factorial when stored in double-precision floating-point format.\n*\n* @module @stdlib/constants-float64-max-nth-double-factorial\n* @type {integer}\n*\n* @example\n* import FLOAT64_MAX_NTH_DOUBLE_FACTORIAL from '@stdlib/constants-float64-max-nth-double-factorial';\n* // returns 300\n*/\n\n\n// MAIN //\n\n/**\n* The maximum nth double factorial when stored in double-precision floating-point format.\n*\n* @constant\n* @type {integer}\n* @default 300\n* @see [double factorial]{@link https://en.wikipedia.org/wiki/Double_factorial}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_NTH_DOUBLE_FACTORIAL = 300|0; // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_NTH_DOUBLE_FACTORIAL;\n"],"names":["floor","Math","isEven","x","isInteger","FLOAT64_PINF","Number","POSITIVE_INFINITY","n","last","out","v","i","isNonnegativeInteger","NaN","PINF"],"mappings":";yCA4CA,IAAIA,EAAQC,KAAKD,MCKjB,SAASE,EAAQC,GAChB,OCTD,SAAoBA,GACnB,OAAQH,EAAMG,KAAOA,CACtB,CDOQC,CAAWD,EAAE,EACrB,CEDA,IAAIE,EAAeC,OAAOC,yBCG1B,SAAqBC,GACpB,IAAIC,EACAC,EACAC,EACAC,ECrBWT,EDsBf,ICtBeA,EDsBHK,ICrBGL,ICQhB,SAA+BA,GAC9B,OAAQH,EAAMG,KAAOA,GAAKA,GAAK,CAChC,CFWqBU,CAAsBL,GACzC,OAAOM,IAER,GAAKN,EGlBiC,IHmBrC,OAAOO,EAGR,GAAW,IADXJ,EAAM,EAAFH,GACS,GAAW,IAANG,EAAQ,EACzB,OAAO,EAQR,IALCF,EADIP,EAAQS,GACL,EAEA,EAERD,EAAM,EACAE,EAAM,EAAFD,EAAKC,GAAKH,EAAMG,GAAK,EAC9BF,GAAS,EAAFE,EAER,OAAOF,CACR","x_google_ignoreList":[0,1,2,3,5,6,7]}